server:
  port: "${PROFILE_SERVICE_PORT:8084}" # Port for the profile service

spring:
  application:
    name: profile-service
  profiles:
    active: "${SPRING_PROFILES_ACTIVE:local}"  # 默认本地
  kafka:
    bootstrap-servers: "${KAFKA_BOOTSTRAP_SERVERS:kafka:29092}"
    # 为了实现 DLQ 的投递 是不是还需要配置 producer?


  datasource:
    url: "jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DB:pulsehub}"
    username: "${POSTGRES_USER:pulsehub}"
    password: "${POSTGRES_PASSWORD:pulsehub}"
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update # Automatically update the schema
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect 
  data:
    redis:
      host: "${REDIS_HOST:redis}"
      port: "${REDIS_PORT:6379}"
      timeout: 3000ms
      connect-timeout: 3000ms
      jedis:
        pool:
          max-active: 8
          max-wait: -1ms
          max-idle: 8
          min-idle: 0

management:
  endpoints:
    web:
      exposure:
        include: health, prometheus  # 暴露 health 和 prometheus 端点(为未来监控做准备)
  endpoint:
    health:
      show-details: always

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}
  instance:
    prefer-ip-address: true

# ... existing code ... 